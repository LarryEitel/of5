// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var latLngFromLl, llFromLatLng, mapMarkersPath, mapMaxZoom, spritesPath,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  llFromLatLng = function(latLng) {
    return latLng.lat + ',' + latLng.lng;
  };

  latLngFromLl = function(ll) {
    var llSplit;

    llSplit = ll.split(',');
    return {
      lat: llSplit[0],
      lng: llSplit[1]
    };
  };

  spritesPath = 'img/map/sprites/';

  mapMarkersPath = 'img/map/markers/small/white/numbers/';

  mapMaxZoom = 19;

  angular.module('ofApp').controller('PlcsCtrl', [
    '$rootScope', '$scope', '$location', '$routeParams', 'Restangular', '$timeout', '$log', '$anchorScroll', 'GoogleMap', function($rootScope, $scope, $location, $routeParams, Restangular, $timeout, $log, $anchorScroll, GoogleMap) {
      var Bdys, Plcs, defaultRouteArgs, gmap, googleMaps, map, qry;

      gmap = GoogleMap;
      googleMaps = google.maps;
      map = gmap.map;
      defaultRouteArgs = {
        ll: '9.971365509675179,-84.16658163070679',
        cngSlug: 'crherbs',
        cngAreaSlug: 'br',
        cngAreaTerrSlug: 'brr06',
        q: '',
        sort: 'bdry,w',
        filter: 'filtBdyId:crherbs',
        z: 17,
        pp: 5,
        pg: 5
      };
      $scope.items = [];
      $scope.lastItemsWithInfo = null;
      $scope.maxId = null;
      $scope.q = $routeParams.q || defaultRouteArgs.q;
      $scope.ll = $routeParams.ll || defaultRouteArgs.ll;
      $scope.z = parseInt($routeParams.z, 10) || defaultRouteArgs.z;
      $scope.pp = $routeParams.pp || defaultRouteArgs.pp;
      $scope.pg = $routeParams.pg || defaultRouteArgs.pg;
      $scope.sort = $routeParams.sort || defaultRouteArgs.sort;
      $scope.args = defaultRouteArgs;
      $rootScope.filtBdyId = $scope.filtBdyId = null;
      $rootScope.editingBdy = false;
      $rootScope.bdysLoaded = false;
      $rootScope.selectedItemIndex = gmap.selectedItem = gmap.selectedItemIndex = -1;
      Bdys = Restangular.all('bdys');
      Plcs = Restangular.all('plcs');
      if (!$routeParams.sort) {
        $routeParams.sort = defaultRouteArgs.sort;
      }
      $rootScope.returnRoute = $location.$$url;
      $scope.location = $location;
      $scope.routeParams = $routeParams;
      $rootScope.filtBdyId = $scope.filtBdyId = $routeParams.filtBdyId;
      console.log('filtBdyId', $rootScope.filtBdyId);
      $rootScope.$watch('selectedItemIndex', function(newValue) {
        $scope.selectedItem = $rootScope.selectedItem;
        return $rootScope.selectedItemIndex = $scope.selectedItemIndex = newValue;
      });
      $scope.printView = false;
      $scope.togglePrintView = function() {
        $scope.printView = !$scope.printView;
        if ($scope.printView) {
          return console.log('PrintView Set On');
        } else {
          return console.log('PrintView Set On');
        }
      };
      gmap.icon = function(item) {
        return $scope.mkrIcon2(item.mkrNo, item.mkrState);
      };
      $scope.itemMkrClick = function(index) {
        var pt;

        $rootScope.selectedItemIndex = gmap.selectedItemIndex = $scope.selectedItemIndex = index;
        $rootScope.selectedItem = gmap.selectedItem = $scope.items[index];
        map.setZoom(mapMaxZoom);
        if ($scope.items[index].pt) {
          $rootScope.selectedItemIndex = gmap.selectedItemIndex = $scope.selectedItemIndex = -1;
          pt = $scope.items[index].pt;
          $scope.ll = llFromLatLng(pt);
          map.setCenter(new google.maps.LatLng(pt[0], pt[1]));
        }
        $location.hash('top');
        return $anchorScroll();
      };
      $scope.doSearch = function() {
        var args, errorCallback, i, plcIds, q, quickFindPlcIds, whereParts;

        if ($rootScope.editingBdy) {
          console.log('currently editing a boundary');
          return;
        }
        console.log('doSearch');
        args = {};
        q = $scope.q;
        whereParts = {};
        if (typeof $routeParams.filtBdyId !== 'boolean' && $routeParams.filtBdyId) {
          whereParts.bdry = $routeParams.filtBdyId;
        }
        quickFindPlcIds = q.match(/qp\w+/g);
        if (quickFindPlcIds) {
          plcIds = [];
          i = 0;
          while (i < quickFindPlcIds.length) {
            console.log(quickFindPlcIds[i]);
            plcIds.push(quickFindPlcIds[i].substr(2));
            ++i;
          }
          whereParts.id = {
            $in: plcIds
          };
          q = q.replace(/qp\w+\s*/g, '');
        }
        if (q) {
          whereParts.dNam = {
            $regex: q,
            $options: 'i'
          };
        }
        if (whereParts) {
          args.where = JSON.stringify(whereParts);
        }
        if ($routeParams.sort) {
          args.sort = $routeParams.sort;
        }
        return Plcs.getList(args).then((function(items) {
          var item, _i, _len, _ref;

          $scope.loadBdys();
          gmap.removeMkrs();
          _ref = items._items;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            items._items[i].patch = $scope.patch;
            if (item.pt && parseInt($routeParams.z, 10) > 16) {
              items._items[i].mapMkr = gmap.addPlcMkr(map, item);
            }
          }
          $rootScope.items = $scope.items = items._items;
          if ($scope.q) {
            return $location.search('q', $scope.q);
          }
        }), errorCallback = function() {
          return console.log('Oops error from server :(');
        });
      };
      $scope.saveBdy = function(bdyKey) {
        var bdy;

        bdy = $rootScope.bdys[bdyKey];
        bdy.poly.setEditable(false);
        return $rootScope.editingBdy = $scope.editingBdy = false;
      };
      $scope.editBdy = function(bdyKey) {
        var bdy;

        console.log('editBdy key:', bdyKey);
        bdy = $rootScope.bdys[bdyKey];
        bdy.poly.setEditable(true);
        return $rootScope.editingBdy = $scope.editingBdy = true;
      };
      $scope.showBdyLabels = function() {
        var bdy, fontSize, lbl, mapLabel, maxZoom, minZoom, slug, strokeColor, x, zIndex, _ref, _results;

        _ref = $scope.bdys;
        _results = [];
        for (slug in _ref) {
          bdy = _ref[slug];
          minZoom = bdy.zoom;
          if (bdy.typ === "congAreaResidentialTerr") {
            strokeColor = '#98F5FF';
            fontSize = 12;
            lbl = bdy.nam.split('#')[1];
            minZoom = 15;
            maxZoom = 17;
            zIndex = 10 + 99999;
          } else if (bdy.typ === "congArea") {
            strokeColor = '#FF82AB';
            fontSize = 16;
            lbl = bdy.nam;
            minZoom = 14;
            maxZoom = 17;
            zIndex = 20 + 99999;
          } else if (bdy.typ === "cong") {
            strokeColor = 'white';
            fontSize = 25;
            lbl = bdy.nam;
            minZoom = 13;
            maxZoom = 17;
            zIndex = 30 + 99999;
          } else {
            strokeColor = 'white';
            fontSize = 20;
            lbl = bdy.nam;
            minZoom = 1;
            maxZoom = 20;
            zIndex = 1000;
          }
          mapLabel = new MapLabel({
            minZoom: minZoom,
            maxZoom: maxZoom,
            strokeColor: strokeColor,
            text: lbl,
            position: new google.maps.LatLng(bdy.ptCenter[0], bdy.ptCenter[1]),
            map: map,
            fontSize: fontSize,
            zIndex: zIndex
          });
          _results.push(x = 0);
        }
        return _results;
      };
      $scope.loadBdys = function() {
        var errorCallback;

        return Bdys.getList({
          sort: 'typ,slug'
        }).then((function(items) {
          var bdy, bdys, filtBdys, i, item, _i, _len, _ref;

          bdys = {};
          filtBdys = [];
          _ref = items._items;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            bdy = {
              slug: item.slug,
              nam: item.nam,
              typ: item.typ,
              ptCenter: [item.ptCenter[0], item.ptCenter[1]],
              zoom: 18,
              mapTypeId: 'hybrid'
            };
            if (item.typ === "congAreaResidentialTerr") {
              bdy.zoom = 18;
            } else if (item.typ === "congArea") {
              bdy.zoom = 15;
            } else if (item.typ === "cong") {
              bdy.zoom = 14;
            } else {
              bdy.zoom = 12;
            }
            bdys[item.slug] = bdy;
            filtBdys.push({
              slug: item.slug,
              nam: item.nam
            });
          }
          $scope.bdys = bdys;
          $scope.filtBdys = filtBdys;
          return $scope.showBdyLabels();
        }), errorCallback = function() {
          return console.log('Oops error from server :(');
        });
      };
      $scope.loadBdyPolys = function() {
        var errorCallback;

        return Bdys.getList().then((function(items) {
          var bdy, bdys, i, item, _i, _len, _ref;

          bdys = {};
          _ref = items._items;
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            item = _ref[i];
            bdy = item;
            bdy.bdyPoly = gmap.addBdy(map, bdy);
            bdys[item.slug] = bdy;
          }
          return $rootScope.bdysLoaded = true;
        }), errorCallback = function() {
          return console.log('Oops error from server :(');
        });
      };
      $scope.patch = function(_id, data) {
        var Plc, errorCallback;

        Plc = Restangular.one('plcs', _id);
        return Plc.customPUT(null, null, null, data).then((function(itemUpdated) {
          return console.log('success!');
        }), errorCallback = function() {
          return console.log('Oops error from server :(');
        });
      };
      $scope.$watch('z', function(newValue) {
        $location.search('z', newValue);
        return $scope.z = parseInt(newValue, 10);
      });
      $scope.$watch('filtBdyId', function(newValue) {
        var bdy, ptCenter;

        $location.search('filtBdyId', newValue);
        $rootScope.filtBdyId = $scope.filtBdyId = newValue;
        if (newValue && typeof newValue === 'string' && $routeParams.filtBdyId !== newValue) {
          bdy = $scope.bdys[newValue];
          ptCenter = bdy.ptCenter;
          map.setCenter(new google.maps.LatLng(ptCenter[0], ptCenter[1]));
          map.setZoom(bdy.zoom);
          map.setMapTypeId(bdy.mapTypeId);
          $rootScope.filtBdyId = $scope.filtBdyId = newValue;
          return $routeParams.filtBdyId = newValue;
        }
      });
      $scope.$watch('routeParams', (function(newVal, oldVal) {
        if (!$rootScope.editingBdy) {
          return angular.forEach(newVal, function(v, k) {
            if (k !== 'where') {
              $scope[k] = v;
              return $location.search(k, v);
            }
          });
        }
      }), true);
      qry = {};
      $scope.doClear = function() {
        $scope.q = $scope.location.q = $scope.routeParams.q = defaultRouteArgs.q;
        return $scope.doSearch();
      };
      $scope.add = function() {
        var data;

        data = 'doc=' + JSON.stringify($scope.newItem);
        Plcs = Restangular.all('plcs');
        return Plcs.post(data).then(function(itemAdded) {
          $scope.newItem._id = itemAdded.doc._id;
          $scope.items.push($scope.newItem);
          return $scope.newItem = {};
        });
      };
      $scope.remove = function($index) {
        var Plc, confirmRemove, errorCallback, item;

        confirmRemove = confirm('Are you absolutely sure you want to delete?');
        if (confirmRemove) {
          item = $scope.items[$index];
          Plc = Restangular.one('plcs', item._id);
          return Plc.remove().then((function() {
            return $scope.items.splice($index, 1);
          }), errorCallback = function() {
            console.log('Oops error from server :(');
            return $location.path('/plc/' + $routeParams.id);
          });
        }
      };
      $scope.insert = function() {
        return $location.path('/plc/insert');
      };
      $scope.edit = function($index) {
        var item;

        item = $scope.items[$index];
        return $location.path('/plc/' + item._id + '/edit');
      };
      $scope.view = function($index) {
        var item;

        item = $scope.items[$index];
        return $location.path('/plc/' + item._id);
      };
      $scope.mkrIcon = function(mkrNo, mkrState) {
        var icon, markerHeight, markerWidth, mkrStates, spriteImage, spriteX, spriteY;

        if (mkrState == null) {
          mkrState = 0;
        }
        mkrStates = ['new', 'try_1', 'try_1_contacted', 'try_2', 'try_2_contacted', 'try_3', 'try_3_contacted'];
        markerHeight = 12;
        markerWidth = null;
        spriteImage = null;
        spriteX = null;
        spriteY = null;
        if (mkrNo < 10) {
          spriteImage = spritesPath + 'sprite_1.png';
          markerWidth = 12;
          spriteX = (mkrNo - 1) * markerWidth;
          spriteY = mkrState * markerHeight;
        } else if (mkrNo < 100) {
          spriteImage = spritesPath + 'sprite_2.png';
          markerWidth = 14;
          spriteX = (mkrNo - 10) * markerWidth;
          spriteY = mkrState * markerHeight;
        } else {
          spriteImage = spritesPath + 'sprite_3.png';
          markerWidth = 18;
          spriteX = (mkrNo - 100) * markerWidth;
          spriteY = mkrState * markerHeight;
        }
        if (spriteY) {
          spriteY += 1;
        }
        if (mkrNo && mkrState > -1) {
          icon = new google.maps.MarkerImage(spriteImage, new google.maps.Size(markerWidth, 12), new google.maps.Point(spriteX, spriteY), new google.maps.Point(markerWidth / 2, markerHeight / 2));
        }
        return icon;
      };
      $scope.mkrIcon2 = function(mkrNo, mkrState) {
        var icon, iconImage, mkrHeight, mkrWidth;

        if (mkrState == null) {
          mkrState = 0;
        }
        iconImage = mapMarkersPath + mkrNo + '.png';
        mkrHeight = 12;
        if (mkrNo < 10) {
          mkrWidth = 12;
        } else if (mkrNo < 100) {
          mkrWidth = 14;
        } else {
          mkrWidth = 20;
        }
        icon = new google.maps.MarkerImage(iconImage, new google.maps.Size(mkrWidth, mkrHeight), new google.maps.Point(0, 0));
        return icon;
      };
      $scope.doSearch();
      return $scope.loadBdyPolys();
    }
  ]);

  angular.module('ofApp').controller('PlcFormCtrl', [
    '$rootScope', '$scope', '$location', '$routeParams', 'Restangular', function($rootScope, $scope, $location, $routeParams, Restangular) {
      var Plc, errorCallback, insertMode;

      insertMode = $location.$$path === '/plc/insert';
      if (insertMode) {
        $scope.mode = 'Add New';
      } else {
        $scope.mode = 'Update';
        Plc = Restangular.one('plcs', $routeParams.id);
        Plc.get().then((function(item) {
          $scope.dNam = item.dNam;
          $scope.item = {};
          $scope.item._id = item._id || null;
          $scope.item.bdry = item.bdry || '';
          $scope.item.nam = item.nam || '';
          $scope.item.namS = item.namS || '';
          $scope.item.addr = item.addr;
          $scope.item.desc = item.desc;
          if (typeof item.tags !== 'undefined') {
            $scope.item.tags = item.tags.join(',');
          } else {
            $scope.item.tags = '';
          }
          if (typeof item.pt !== 'undefined') {
            $scope.item.lng = item.pt[0];
            return $scope.item.lat = item.pt[1];
          }
        }), errorCallback = function() {
          return console.log('Oops error from server :(');
        });
      }
      $scope.remove = function(item) {
        var confirmRemove;

        confirmRemove = confirm('Are you absolutely sure you want to delete?');
        if (confirmRemove) {
          Plc = Restangular.one('plcs', item._id);
          return Plc.remove().then((function() {
            return $location.path('/plcs');
          }), errorCallback = function() {
            console.log('Oops error from server :(');
            return $location.path('/plc/' + $routeParams.id);
          });
        }
      };
      $scope.save = function(item) {
        var Plcs, data;

        data = {};
        console.log('save');
        if (insertMode) {
          data = 'doc=' + JSON.stringify(item);
          Plcs = Restangular.all('plcs');
          return Plcs.post(data).then((function() {
            return window.location.href = '#' + $rootScope.returnRoute;
          }), errorCallback = function() {
            return console.log('Oops error from server :(');
          });
        } else {
          if ('undefined' !== item.tags && item.tags > '') {
            item.tags = item.tags.split(',');
          } else {
            item.tags = [];
          }
          if ('undefined' !== item.lng && 'undefined' !== item.lat) {
            item.pt = [item.lng, item.lat];
            delete item.lat;
            delete item.lng;
          }
          delete item._id;
          console.log('item', item);
          data = JSON.stringify({
            actions: {
              $set: {
                flds: item
              }
            }
          });
          return Plc.customPUT(null, null, null, data).then((function(itemUpdated) {
            return window.location.href = '#' + $rootScope.returnRoute;
          }), errorCallback = function() {
            return console.log('Oops error from server :(');
          });
        }
      };
      return $scope.abandonChanges = function() {
        return $location.path('/plc/' + $scope.item._id);
      };
    }
  ]);

  angular.module('ofApp').controller('PlcViewCtrl', [
    '$rootScope', '$scope', '$location', '$routeParams', 'Restangular', function($rootScope, $scope, $location, $routeParams, Restangular) {
      var Plc, errorCallback;

      Plc = Restangular.one('plcs', $routeParams.id);
      Plc.get().then((function(item) {
        $scope.item = item;
        if (__indexOf.call(item, 'pt') >= 0) {
          $scope.lng = item.pt[0];
          return $scope.lat = item.pt[1];
        }
      }), errorCallback = function() {
        return console.log('Oops error from server :(');
      });
      $scope.remove = function(item) {
        var confirmRemove;

        confirmRemove = confirm('Are you absolutely sure you want to delete?');
        if (confirmRemove) {
          Plc = Restangular.one('plcs', item._id);
          return Plc.remove().then((function() {
            return window.location.href = '#' + $rootScope.returnRoute;
          }), errorCallback = function() {
            console.log('Oops error from server :(');
            return window.location.href = '#' + $rootScope.returnRoute;
          });
        }
      };
      return $scope.edit = function(item) {
        return $location.path('/plc/' + item._id + '/edit');
      };
    }
  ]);

}).call(this);
