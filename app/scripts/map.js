// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var GMap, GMarker, latLngFromLl, llFromLatLng,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  llFromLatLng = function(latLng) {
    return latLng.lat + ',' + latLng.lng;
  };

  latLngFromLl = function(ll) {
    var llSplit;

    llSplit = ll.split(',');
    return {
      lat: llSplit[0],
      lng: llSplit[1]
    };
  };

  GMap = (function() {
    function GMap(options) {
      this.onTypeChange = __bind(this.onTypeChange, this);
      this.onZoomChange = __bind(this.onZoomChange, this);
      this.onCenterChanged = __bind(this.onCenterChanged, this);
      this.resizeMapEl = __bind(this.resizeMapEl, this);
      this.onDragEnd = __bind(this.onDragEnd, this);
      this.onDragStart = __bind(this.onDragStart, this);
      this.addPlace = __bind(this.addPlace, this);
      var addListener;

      console.log('GMap.constructor');
      this.rootScope = options.rootScope;
      this.dragging = 0;
      this.location = options.location;
      this.routeParams = options.routeParams;
      this.zoom = parseInt(this.location.search().z) || options.zoom;
      this.mapType = this.location.search().t || options.mapType;
      this.ll = this.location.search().ll || options.ll;
      if (this.ll) {
        this.center = latLngFromLl(this.ll);
      } else {
        this.center = options.center;
      }
      this.routeParams.ll = this.ll;
      this.win = $(window);
      this.mapEl = $("#map");
      this.mapTypes = {
        m: 'roadmap',
        h: 'hybrid'
      };
      this.map = new google.maps.Map(this.mapEl[0], {
        zoom: this.zoom,
        center: new google.maps.LatLng(this.center.lat, this.center.lng),
        mapTypeId: this.mapTypes[this.mapType]
      });
      addListener = google.maps.event.addListener;
      addListener(this.map, 'center_changed', this.onCenterChanged);
      addListener(this.map, 'maptypeid_changed', this.onTypeChange);
      addListener(this.map, 'zoom_changed', this.onZoomChange);
      addListener(this.map, 'dragstart', this.onDragStart);
      addListener(this.map, 'dragend', this.onDragEnd);
      this.rootScope.protocol = this.location.protocol();
      this.rootScope.host = this.location.host();
      this.rootScope.mapCenter = this.center;
      this.rootScope.mapZoom = this.zoom;
      this.rootScope.mapType = this.mapType;
    }

    GMap.prototype.updateLocation = function() {
      console.log('updateLocation');
      if (this.location.path() === "/map") {
        console.log(this.location.url());
        return this.rootScope.$apply();
      }
    };

    GMap.prototype.addPlace = function() {
      return console.log('addPlace');
    };

    GMap.prototype.onDragStart = function() {
      return this.dragging = true;
    };

    GMap.prototype.onDragEnd = function() {
      this.dragging = false;
      return this.onCenterChanged();
    };

    GMap.prototype.resizeMapEl = function() {};

    GMap.prototype.onCenterChanged = function() {
      var center;

      center = this.map.getCenter();
      this.center.lat = center.lat();
      this.center.lng = center.lng();
      if (!this.dragging) {
        console.log('onCenterChanged & !dragging');
        this.rootScope.mapCenter = this.center;
        this.ll = llFromLatLng(this.center);
        this.routeParams.ll = this.ll;
        this.rootScope.$apply();
        return this.updateLocation();
      }
    };

    GMap.prototype.onZoomChange = function() {
      console.log('onZoomChange');
      this.rootScope.mapZoom = this.zoom = this.map.getZoom();
      this.routeParams.z = this.zoom;
      this.rootScope.$apply();
      return this.updateLocation();
    };

    GMap.prototype.onTypeChange = function() {
      console.log('onTypeChange');
      this.mapType = this.map.getMapTypeId();
      this.rootScope.mapType = this.mapType[0];
      this.routeParams.t = this.mapType[0];
      this.rootScope.$apply();
      return this.updateLocation();
    };

    return GMap;

  })();

  GMarker = (function() {
    function GMarker() {
      this.show = __bind(this.show, this);
    }

    GMarker.prototype.render = function() {
      return this.show();
    };

    GMarker.prototype.show = function() {};

    return GMarker;

  })();

}).call(this);
